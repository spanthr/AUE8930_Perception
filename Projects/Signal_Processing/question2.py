# -*- coding: utf-8 -*-
"""question2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hFqN0D8k59ShVLfMISViEOLzUYfqUZ81
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import math
Fs=1*10**6                                                                             # sampling frequency or rate
N=Fs                                                                            #Time period
time=np.linspace(0,1,N)                                                         # time vector start,end and size
time_data=[]
n=np.linspace(0,1000,1)
x=np.arange(0,1000,1)
#print(x)
count=0

while(count<=((len(time)/2)-1)):
  time_data.append(0)
  count=count+1
count=0
while(count<=((len(time)/2)-1)):
  time_data.append(1)
  count=count+1

print(len(time))
print(len(time_data))

"""plotting the function"""

plt.plot(time,time_data[0:len(time_data)])
plt.title('Time Domain')
plt.ylabel('Amplitude')
plt.xlabel('Time in Msec')
plt.show()



"""Analyzing the singnal in  the frequency domain"""
from scipy.fftpack import fft                                                     #import Fourier transform for converting to frequency domain

Fs=Fs/2                                                                          #Nyquist Shanon requirement
frequency=np.linspace(0.0,Fs,int(N/2))
#freq_data=fft(time_data)                                                          # frequecny data for time domain using the fft function
freq_data=np.abs(np.fft.fft(time_data)) 
y=2/N*np.abs(freq_data[0:np.int(N/2)])

""" Plotting the frequency domain function"""
plt.plot(freq_data)
#plt.plot(y,frequency)
plt.title('Frequency domain signal')
plt.xlabel('Frequency in Hz')
plt.ylabel('Amplitude')
plt.show()

